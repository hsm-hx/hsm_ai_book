= 感情を実装する

この章では、hsm_aiに感情を実装します。今回は、簡易的なものとして感情をポジティブ・ネガティブの2極として考えます。

== 感情解析と感情極性辞書

コンピュータ上で人間の感情を再現する際、多く用いられるのが今回取り上げる「感情を正と負の2極として考える手法です。これはMicrosoft AzureのEmotion API@<fn>{emotionapi}やGoogleの自然言語API@<fn>{cnlapi}でも採用されています。
//footnote[emotionapi][https://azure.microsoft.com/ja-jp/services/cognitive-services/emotion/]
//footnote[cnlapi][https://cloud.google.com/natural-language/?hl=ja]

これをそのまま使っても良いですが、今回は同じような動作をするプログラムを実際に書いてみます。

2値的な感情解析は非常に簡単で、単語ごとの感情の正負を予め解析して作られた感情極性辞書というものが公開されています。感情極性辞書を使うことで、文中に出現する単語の感情極性値を計算し文全体での感情スコアを得ることができます。

今回は、東北大学の研究室によって製作された日本語評価極性辞書@<fn>{senti-dict}を利用します。
//footnote[senti-dict][http://www.cl.ecei.tohoku.ac.jp/index.php?Open%20Resources%2FJapanese%20Sentiment%20Polarity%20Dictionary]

== 感情極性辞書を用いた感情解析

感情解析システムを作る前の下準備として、日本語評価極性辞書をダウンロードし使いやすい形に直してデータベースに格納しておきます。
日本語評価極性辞書では、感情極性は「ポジ」「ネガ」として表記されています。これを元に、感情極性が「ポジ」の単語は感情スコアを1、「ネガ」の単語は-1として単語をデータベースに溜め込んでいきます。

その後、感情解析のターゲットとなる文章を形態素解析し、一つずつの単語を感情極性データベースと照合し、感情スコアが定義されていた場合、その値を足し合わせていきます。最後に感情スコアが定義されていた単語数で足し合わせた値を割ることで、-1から1までの値をとる文全体の感情スコアを得ることができます。

== 係り受け解析による精度の向上

しかし、この手法にはまだ問題が残されています。「〜ではない」など、ある単語に対して否定の意味を持つ単語が係っている場合にも単純に元の単語のみの極性で感情を判別してしまうことです。

これを防ぐために、係り受け解析を使います。係り受け解析とは、与えられた文章を見てどの文節がどの文節に係っている（どの文節を修飾している）かを判別するもので、形態素解析と同じ自然言語処理技術の一つです。

形態素解析にはMeCabというエンジンがありましたが、係り受け解析にはCaboCha@<fn>{cabocha}というエンジンを使います。
//footnote[cabocha][http://taku910.github.io/cabocha/]

CaboChaはMeCabと同じように、公式サイトよりソースをダウンロードしてインストールすることができます。予めCRF++@<fn>{crfpp}とMeCabをインストールしておく必要があります。
//footnote[crfpp][http://taku910.github.io/crfpp/]

CaboChaをインストールするには、ソースファイルをダウンロードし解凍した後ディレクトリに入り以下のコマンドを実行します。

//cmd{
  $ ./configure
  $ make
  $ make check
  # make install
//}

CaboChaをインストールすると、コンソールから`cabocha`コマンドを使うことができるようになります。以下は実際にcabochaを動作させた例です。

//cmd{
  $ cabocha
    私は以前ある人から美味しいジュース屋を教わりました。
          私は-----------D
            以前-D       |
              ある-D     |
              人から-----D
              美味しい-D |
            ジュース屋を-D
            教わりました。
//}

上の表示は、解析結果をツリー状にして表示しています。「---D」という出力は、ツリーを縦に見たときに「D」の位置にある文節を修飾していることを意味します。この例では、「私は」が「教わりました。」を修飾していることや、「美味しい」が「ジュース屋を」を修飾していることがわかります。

これを用い、否定の意味を持つ文節を特定し感情極性を反転させることで感情解析システムを改良することが可能です（執筆時まだコードを書いていません叩かないで）。

== hsm_aiと感情解析システム

さて、こうして作られた（作られていない）感情解析システムですが、どのようにhsm_aiに活かすかというと、第5章にてUnity上でhsm_aiの対話システムとその3Dモデルを動かす際、このシステムを組み込むことで対話中の表情やモーションにhsm_aiの感情を反映させることができます。
（この原稿を執筆中は残念ながら感情解析システムが未完成なので詳しくは記述することができませんが、感情極性スコアに一定の閾値を定め、それを超える強い感情が検出された際に決まったモーションや表情を再生する、といった仕組みを考えています。高専祭当日には完成していたらいいですね）

