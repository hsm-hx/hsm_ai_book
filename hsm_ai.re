= hsm_aiとは ~はじめての人工知能~

== この本について

hsm_aiは、プログラミング言語Rubyにより制作された人工知能@<fn>{ai}です。
//footnote[ai][正確には人工知能と呼べるものではありませんが、それについては第n章にて詳しく記述します。]

この本では、hsm_aiを制作するにあたって用いた以下の技術について取り上げます。


 * 形態素解析
 * マルコフ連鎖
 * 係り受け解析
 * 特徴語抽出
 * 感情極性辞書による感情解析
 * VRoidStudioによる3Dモデル製作
 * ゲームエンジンUnity


== hsm_aiとは

hsm_aiは、開発者である私、hsm_hxの発言を学習し文章を自動生成するマルコフ連鎖によるbotです。

私のTwitter@<fn>{twitter}からツイートを取得し、形態素解析という手法を用いてそのツイートを単語ごとに分割します。単語ごとに分割した文章を数単語ずつの塊にし、そうしてできたたくさんの単語の塊を規則に従って組み替えることで日本語らしい文章を生成します(詳しくは第1章にてお話します)。
//footnote[twitter][@hsm_hx: https://twitter.com/hsm_hx]

百聞は一見にしかずとも言うので、まずはhsm_aiの生成した文章をいくつかご紹介します。以下に示す文章は、全てhsm_aiというシステムによって生成されたものです。

//quote{
  ひえ〜8時間で自動的に目を覚ました
//}

//quote{
  フォロワー37人もいるの人間になる
//}

//quote{
  ミーン！（閃いた顔）
//}

//quote{
  ミーン！で爆笑してるでしょ
//}

//quote{
  頭を使うことを学んだ
//}

//quote{
  あぁ＾〜単位落ちる
//}

//quote{
  声出して笑ってもらえるって嬉しいかもしれない
//}

//quote{
  iTunesで素敵に心を購入
//}

//quote{
  お前はやりたいことやるのが大事
//}

いかがでしょうか？確かになんとなく不自然に見える文章もありますが、かなりの割合で日本語として解読が可能な文章が生成されていると思います。それどころか、人間には書けないような独創的（という表現が正しいのかはわかりませんが）な文も散見されます。

この本では、このhsm_aiが生み出され対話型botとして高専祭で展示されるまでの成長の過程をひとつずつ追っていきます。

== 開発環境

hsm_aiを開発するにあたって利用した言語やライブラリ、ツールは以下の通りです。

: Windows 10
  言わずと知れた一般的OS。UnityとVRoidStudioを利用するために使いました。
: Antergos
  Windows, MacOSXと並ぶOSであるLinuxの一種。Windowsよりプログラミングの環境構築が簡単（個人差あり）なのでメイン開発OSとして採用。Arch Linuxというディストリビューションを使いやすくするため予め必要なパッケージを揃えたもの。Arch Linuxは最高です。
: Ruby 2.5.1
  日本人によって開発されたスクリプト言語。webサービスを作るのによく使われています。
: MeCab 0.996
  日本語の文章を形態素解析(第2章にて解説)するためのエンジン。
: CaboCha 0.69
  日本語の文章を係り受け解析(第4章にて解説)するためのエンジン。
: Unity
  言わずとしれた超有名ゲームエンジン。3Dモデルを動かすために使用します。
: VRoidStudio
  最近流行りの3Dモデル作成ソフト。絵を描くように直感的な操作で本格的な3Dモデルが作れます。

= マルコフ連鎖による文章生成

== マルコフ連鎖とは

マルコフ連鎖とは、物理や統計、強化学習など様々な分野において事象をモデル化するためにしばしば用いられる確率論の考え方の一種です。

この本ではマルコフ連鎖について詳しく踏み込むことはしませんが、ざっくりとその性質を説明すると、ある事象についてその未来を考えるとき、「その事象の未来は過去に関わりなく、現在の状態のみによって定まる」という特性を持つときの未来予測に用いられるアルゴリズムです。

この後で具体的に例を挙げて解説しますが、hsm_aiではこのような理論を応用することで日本語らしい文章を機械生成しています。

== マルコフ連鎖による文章生成アルゴリズム

では、実際にマルコフ連鎖を用いて文章を生成していきます。
hsm_aiの文章生成には、以下のようなアルゴリズムを採用しています。実際に例を挙げながら、機械的に文章が生成される過程を追っていきましょう。

まず、学習元になる複数の文章を用意します。ここでは、例として以下の2つの文を用意しました。

ここにりんごがあります。
その箱にはぶどうが2つ入っています。

この文章をマルコフ連鎖するために、まずは下準備として、それぞれの文を単語ごとに分割します。これを分かち書きといいます。上の文を分かち書きすると、下のようになります。

ここ / に / りんご / が / あり / ます / 。
その / 箱 / に / は / ぶどう / が / 2 / つ / 入っ / て / い / ます / 。

さて、次に、この分かち書きされた文章から、3つの連続する単語をひとまとめにしたブロックを作ります。ここでポイントになるのは、各文章のはじめとおわりにそれぞれ「ここが文のはじまり(おわり)です」という目印をつけることです。
実際にブロックを作ってみます。ここでは、はじめとおわりを表す印として「*」という記号を使うことにします。

[*, ここ, に], [ここ, に, りんご], [に, りんご, が], [りんご, が, あり], [が, あり, ます], [あり, ます, 。], [ます, 。, *]
[*, その, 箱], [その, 箱, に], [箱, に, は], [に, は, ぶどう], [は, ぶどう, が], [ぶどう, が, 2], [が, 2, つ], [2, つ, 入っ], [つ, 入っ, て], [入っ, て, い], [て, い, ます], [い, ます, 。], [ます, 。, *]

[]の中に、3つの連続する単語をコンマ区切りで並べています。hsm_aiの文章生成には、プログラムにより生成された何千、何万もの単語ブロックが使われています。

さて、このたくさんのブロックをどのように使うのかというと、ここでマルコフ連鎖というものを使います。
条件に合うブロックを探し、その中からランダムに1つを選び後ろにつなげていくことで文章を生成していきます。具体的に上のブロックを使ってマルコフ連鎖によって文章が生成される過程を追ってみましょう。


まず、文章のはじめは「*」としてありました。なので、「*」からはじまるブロックを探します。
[*, ここ, に], [*, その, 箱]の2種類です。

この3つの中から、ランダムに1つを選びます。今回は[*, ここ, に]を選んだとします。

次に、[*, ここ, に]につながるブロックを探します。つまり、「に」からはじまるブロックを選べば良いというわけです。
ここでは、[に, りんご, が], [に, は, ぶどう]の2つが考えられます。

この2つの中から、ランダムに1つを選びます。次は[に, は, ぶどう]が選ばれたとします。

こうして、[*, ここ, に], [に, は, ぶどう]という2つの接続可能なブロックが選ばれました。これを「*」で終わるブロックに到達するまで続けます。その様子を表したものが下の図です。

このように、「ここにりんごがあります。」,「その箱にはぶどうが2つ入っています。」という2つの文から新しく、「ここにはぶどうが2つ入っています。」という意味の違う文章が生成されました。これが、マルコフ連鎖による文章生成です。

== 形態素解析エンジンMeCab

さて、マルコフ連鎖による文章生成アルゴリズムについてはなんとなくイメージを掴んでもらえたかと思います。しかし、先ほど登場した「分かち書き」という処理をプログラミングで実現するにはどうすればいいでしょうか？
3つの単語をブロックにして連鎖させる…といった箇所については、ある程度プログラミングの経験がある人であれば愚直にコードに起こすことができるでしょう。ですが、ある文章を単語ごとに分割してその品詞を特定する、という処理はどうやって書けばいいのでしょうか？おそらく、それを実現するには膨大な時間と研究が必要です。

そこで役に立つのが形態素解析エンジンMeCab@<fn>{MeCab}です。
//footnote[MeCab][http://taku910.github.io/mecab/]

MeCabは、京都大学とNTT株式会社の共同研究プロジェクトによって開発された形態素解析エンジンです。形態素解析というのは、日本語や英語など、私達が普段から使う言語（自然言語）の文を単語に分割し、その品詞などを判別する解析作業のことを指します。

MeCabを使用することで、文章を簡単に形態素解析し分かち書きされた状態にすることができます。
MeCabはGitHub上で公開されているオープンソースソフトウェアなので、Gitが導入されている環境であればリポジトリ@<fn>{mecab-github}をcloneしビルドすることですぐ使えるようになります。
//footnote[mecab-github][https://github.com/taku910/mecab]

//cmd{
  $ git clone https://github.com/taku910/mecab.git
  $ cd mecab/mecab
  $ ./configure --with-charset=utf8
  # make install
  $ cd ../mecab-ipadic
  $ ./configure --with-charset=utf8
  # make install
//}

以上の手順で、MeCab本体とMeCabを動かすための辞書データをインストールします。また、必要に応じて、新語やネット用語などに特化した辞書データであるmecab-ipadic-neologd@<fn>{neologd}も追加で導入します。
//footnote[neologd][https://github.com/neologd/mecab-ipadic-neologd]

ここまでできたら、MeCabを実際に動かしてみます。コマンド上で`mecab`コマンドを実行し、続けて好きな文章を入力することで動作を確認することができます。

また、MeCabは各種プログラミング言語からスムーズに使用するためのバインディングを標準で提供しています（Perl, Ruby, Python, Java, C#）。
その他、MeCabをより快適に利用するためのライブラリも各種言語で充実しています。例えば、RubyではnattoというGemが配布されており、hsm_aiはnattoを採用しています。

== Twitterのbotとしてリリースする

さて、理論を抑えたところで、実際にTwitterからツイートの情報を取得し、そのデータを元に生成した文をTwitterに投稿してみます。

Twitterからデータを取得したり、ツイートやいいねなどをプログラムから行うには、Twitterが公式に提供しているAPIを使います。APIとはApplication Program Interfaceの略で、プログラムから何らかのアプリケーションを利用するための決まった形式のことを指します。具体的には、今回使うTwitterAPIの他にもGoogleの提供するGoogle Maps APIやMicrosoftの提供するFace APIなど、様々なものがあります。
このようなAPIを利用することで、プログラミングを始めたての初心者でも既存のサービスの機能をプログラムから利用したり、顔認識や機械学習などの複雑な処理を自分で実装することなく自分のプログラムに組み込むことができます。

今回はツイートの取得、自動ツイートを実現したいので、TwitterAPIを使います。TwitterAPIの利用にはTwitter開発者登録が必要です。Twitterのデベロッパー向けページにアクセスし、開発者として認証してもらうために数点の質問に答えます。
開発者として認証されると、プログラムからTwitterAPIを利用するために必要なトークンが発行されるので、それを使ってTwitterAPIを利用するプログラムを書きます。

TwitterAPIの利用の仕方については、インターネットで検索するとたくさんヒットするのでここでは割愛しますが、多くのプログラミング言語ではTwitterAPIを簡単に利用するためのライブラリが公開されています。

このようにして作られたのが、現在Twitter上で動作しているhsm_aiです。ソースコードはGitHub@<fn>{hsm_ai-github}上で公開しているので、興味がある人は参考にしてみると良いかもしれません。
//footnote[hsm_ai-github][https://github.com/hsm-hx/hsm_ai]

= 対話機能を実装する

この章では、受け取った文章から話題となるキーワードを見つけそのキーワードに沿った文章を返す機能を実装していきます。使用する技術は以下の通りです。

== 形態素解析による話題検出

今回は、形態素解析によって与えられた文章から話題であると推測される単語を検出する簡易的な手法を紹介します。

まず、文章の中で話題になり得る要素が何であるかを考えます。
以下の文章を例にとってみましょう。

//quote{
  このオレンジジュースは美味しいです。
//}

さて、この文に対する返答として期待されるものは一体何でしょうか？
考えられるのは「そうですね」といった相槌、もしくは「私はオレンジジュースはあまり好きではありません」「駅前にもっと美味しいオレンジジュースが売ってあるよ」という風なオレンジジュースについての言及、「この店はぶどうジュースも美味しいですよ」というジュースについての言及などが考えられるでしょうか。

ここでは、会話に対する返答として考えられるものは大きく分けて2種類あるものと考えます。1つは相槌、もう1つは会話中の名詞に関連する文です。

相槌については定型文を返せば良いとして、ここでは後者の「会話中の名詞に関連する文」を返す処理を作っていきます。

考え方は単純で、会話文として受け取った文データから名詞を抽出した上で不要なものを弾いていきます。
文から名詞を抽出するという部分については、MeCabによる形態素解析を用いることで簡単に実装することが可能です。

MeCabに文を入力することで、品詞IDと呼ばれるものを得ることができます。基本的には、この品詞IDが名詞のものである単語のみを抜き出すことで文中の話題を検出していきます。

さて、ここで実際に品詞IDによって名詞の抽出を行ってみます。以下の文章を例に試してみましょう。

//quote{
  ぼくは君に借りた本を読んだ。
//}

この文の場合、品詞IDによって名詞を抽出すると次の3単語を得ることができます。

//quote{
  ぼく, 君, 本
//}

さて、ここでこの結果が妥当であるか考えてみます。確かに名詞を抽出していることには間違いないのですが、「ぼくは君に借りた本を読んだ」と言われたときに「ぼく」や「君」についての話題で返すのは本当に正しい会話でしょうか？

この会話の場合、より話題として適切なのは「本」でしょう。なぜ「ぼく」や「君」は不適なのかを考えます。
今回は、その理由を「話し手を指す言葉であるため」と仮定します。この「ぼく」や「君」のように会話に登場する人間を指す言葉は、直接的な話題になりにくい傾向があると考えたためです（私は専門家ではないため、本来この考え方は正しくないかもしれませんが）。

このように話し手を指す言葉を抽出対象から外すため、今回は簡易的な措置になりますが、品詞が名詞であると推定された単語の中でも、代名詞の品詞IDを持つ単語を除外するように指定します。
こうして、与えられた文から話題となりそうなものを抽出することができるようになりました。話題と推定される単語が2つ以上抽出された場合はランダムにどれか一つを選択することで単純なものではありますが話題検出のコードとしています。

== 話題に対する応答を作る

会話文として与えられたデータに対して話題を検出できるようになったところで、それに対してどのように応答をするかという部分を作っていきます。ここで話題がマルコフ連鎖による文章生成に戻ります。
会話の話題と推定されるものを単語で得ることができているため、その単語についての文を生成して返却すれば良いでしょう。

これは単純で、話題として抽出した単語を含むブロックを探してきて、その中からランダムにひとつを選び、先頭と末尾が「*」になるまで前後にマルコフ連鎖をさせれば良いわけです。

このような手法で話題に対するレスポンスを作ることで、将来的に話題として「きれいな景色」や「おいしい水」、「オレンジジュース」などの修飾された名詞やMeCab標準だと2つの異なる名詞の連続と認識されてしまうようなものを抽出するようにした際にもそのように単語が連続しているブロックを探すと良いので、比較的容易に会話システムをアップデートできるでしょう。

= 3Dモデルと音声の実装

== VRoidStudioによる3Dモデル製作

VRoidStudio@<fn>{vroid}はピクシブ株式会社によって開発された3Dモデリングソフトウェアで、人の形をした3Dアバターを簡単に作成することができます。WindowsとMacに対応しており、無償で誰でも使うことができます。
//footnote[vroid][https://vroid.pixiv.net]

このソフトウェアを使うことで、絵を描くように3Dモデルを作ったりそのモデルに表情を付け実際に動かしたりすることができます。作った3DモデルはVRMという形式で書き出すことができるため、vrmに対応した各種ソフトウェア・サービスにて使用することができます。

今回は、このVRoidStudioを使ってhsm_aiのイメージキャラクターを作成し、Unity（ゲームエンジン）上で動かせるようにします。

VRoidStudioは公式サイトからダウンロードして利用することができます。頻繁に機能の追加や改良がされた最新版が公開されるので、メールニュースや公式Twitterで最新の情報を追うと良いでしょう。

ここでは、Windows版を例としてhsm_aiのモデルが作られるまでを追っていきます。ダウンロードしてファイルを解凍したら、フォルダの中のVRoidStudio.exeを開きます。これがVRoidStudioの本体です。VRoidStudioを起動すると、解像度や描画性能の設定画面が開くので好みに設定してPlay!ボタンをクリックします。

表示されたメニュー画面で新規作成を選び、作成する3Dモデルの名前を入力しモデル作成を始めます。
VRoidStudioでは、元あるモデルから顔、体型、髪型を編集することができます。顔と体型は目の形、口など各種パーツの位置、身長など様々な項目をパラメータを0〜100の間で操作することで調整します。
髪型は、元ある素体に対してマウスのD&Dで房を生やすことで実現します。ここでは、実際にhsm_aiの髪型を再現する過程の一部を紹介します。

髪型編集タブを開きます。視点が頭に近づき、パネルの配置が髪型編集モードに変わります。ここで、左パネルから『手書きガイドを追加』をクリックします。すると、頭の周りに網状の表示が出現します。マウスを用いて髪の房を描画すると、この手書きガイドに沿った形になります。手書きガイド上の頂点をD&Dで動かすと、髪を描画するときの流れ方を変えることができます。今回は毛先を少し内向きにしたいので、以下のような形に手書きガイドを修正しました。

// ここに画像が入る

さて、それでは髪を描画していきましょう。マウスでも良いですが、ペンタブレットのような直感的に入力することができるデバイスがあるとより快適です。
中央パネルの左上にあるアイコンのうち、上から二番目のペンアイコンをクリックすることで描画モードにすることができます。
まず、髪の房の形を決めます。デフォルトでは毛先に行くにつれて房が細くなっていきますが、hsm_aiの髪は毛先を四角に近い形（ぱっつん）にしたいので、そのように設定を変更します。
右パネルを下側にスクロールすると、『形状』という項目があるので、『ぱっつん』を選択します。すると、その下のグラフの形が変わったことがわかります。このグラフを直接編集することでより細かく形状の指定ができますが、今回はこのプリセットのまま進めます。
また、パネル上部の『ヘアーパラメータ』からも髪の形状を細かく指定することができます。

まずは前髪から作っていきます。つむじ付近から前髪の長さの位置まで線を書く感覚でD&Dします。このとき、カメラを前髪の斜め上付近にするとうまく描くことができます。
前髪を生やし終わったら、長さを調整します。中央パネル左上のアイコンのうち、一番下のワイヤアイコンをクリックします。このモードでは、描画した房の形を直接編集することができます。編集したい房をクリックし、頂点を好きな位置に移動させて前髪の長さを揃えます。

// ここに画像が入る

また、描画した房を削除することもできます。中央パネル左上のアイコンのうち、マウスカーソルをクリックします。この状態で房をクリックすると、左パネルのヘアーリストから該当するオブジェクトが選択された状態になるので、右クリックして削除します。
今回は、より自然な前髪に見えるよう数点の房を削除し新しく『形状：ふんわり』で房を置き換えました。

// ここも画像

横髪や後ろ髪も同じように描画・修正を繰り返してイメージに合う形を作っていきます。
髪型が完成したら、色を変更します。選択モードにした上で、左パネルのヘアーリストから『手描きグループ1』と表示されている箇所をクリックすると右パネルにマテリアルタブが表示されます。この中の『基本色』『かげ色』『ハイライト』を変更することで、髪を任意の色に変更することができます。

また、髪や顔のテクスチャは手動で描き換えることも可能です。顔編集・髪型編集タブを開くと左パネルにテクスチャタブがあるので、その中から任意の部位のテクスチャを描き替えることができます。最新版ではレイヤ分割に対応しているので、まさに絵を描くように直感的にテクスチャを編集することができます。

以下の図は以上の機能を使用して作られたhsm_aiの3Dモデルです。

// ここも画像

このモデルをUnityで扱えるようVRm形式でエクスポートします。『撮影・エクスポート』タブから、左パネル下部のエクスポートをクリックして必要な箇所を入力しエクスポートします。こうして、VRoidStudioによる3Dモデルの準備が完了しました。

== UnityでVRMモデルを動かす
